// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IFCViewerFramework
import Alamofire
import CITreeView
import CommonCrypto
import Foundation
import Gzip
@_exported import IFCViewerFramework
import Log
import RealmSwift
import SceneKit
import Swift
import UIKit
public enum CameraMode : Swift.CustomStringConvertible {
  case orbital
  case firstPerson
  case automatic
  public var description: Swift.String {
    get
  }
  public static func == (a: IFCViewerFramework.CameraMode, b: IFCViewerFramework.CameraMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol CameraModesDelegate : AnyObject {
  func cameraModeChanged(cameraMode: IFCViewerFramework.CameraMode)
}
public enum MaskOption : Swift.CustomStringConvertible {
  case selected
  case sameType
  case others
  public var description: Swift.String {
    get
  }
  public static func == (a: IFCViewerFramework.MaskOption, b: IFCViewerFramework.MaskOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol MaskOptionsDelegate : AnyObject {
  func maskOptionChanged(maskOption: IFCViewerFramework.MaskOption)
}
public struct HJCoreProperty {
}
extension HJCoreProperty : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HJCoreModelMetadata {
}
extension HJCoreModelMetadata : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HJCorePropertySet {
}
extension HJCorePropertySet : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class IFCAsynchronousOperation : Foundation.Operation {
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
  }
  public func completeOperation()
  @objc override dynamic public func start()
  @objc override dynamic public init()
  @objc deinit
}
public let HJC_HOST: Swift.String
public let HJC_RESSOURCE_PATH_OAUTH2: Swift.String
public let HJC_RESSOURCE_PATH_API: Swift.String
public let HJC_RESSOURCE_PATH_BIM: Swift.String
public let HJC_SERVICE_RESSOURCE_ACCESS_TOKEN: Swift.String
public let HJC_SERVICE_RESSOURCE_USER: Swift.String
public let HJC_SERVICE_RESSOURCE_LDAP_USER: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL: Swift.String
public let HJC_SERVICE_RESSOURCE_MODELS: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_NAME: Swift.String
public let HJC_SERVICE_RESSOURCE_DOWNLOAD_MODEL: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_SHARE_LINK: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_COBie: Swift.String
public let HJC_SERVICE_RESSOURCE_DOWNLOAD_COBie: Swift.String
public let HJC_SERVICE_RESSOURCE_DOWNLOAD_GLTF: Swift.String
public let HJC_SERVICE_RESSOURCE_DOWNLOAD_DAE: Swift.String
public let HJC_SERVICE_RESSOURCE_DOWNLOAD_DAE_MAC: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_PERMISSION: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENTS_UUIDS: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_ATTRIBUTE_NAMES: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_ATTRIBUTE_VALUES: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_ATTRIBUTE_VALUE_UUIDS: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENT: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENTS: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENT_ATTRIBUTES: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENTS_ATTRIBUTES: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENTS_COMMON_ATTRIBUTES: Swift.String
public let HJC_SERVICE_RESSOURCE_ELEMENT_MATERIALS: Swift.String
public let HJC_SERVICE_RESSOURCE_ROOM_ATTRIBUTES: Swift.String
public let HJC_SERVICE_RESSOURCE_ZONE_ATTRIBUTES: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_FLOOR_LIST: Swift.String
public let HJC_SERVICE_RESSOURCE_MODELS_FLOOR_LIST: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_TREE: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_TYPE_LIST: Swift.String
public let HJC_SERVICE_RESSOURCE_MODEL_SYSTEM_LIST: Swift.String
public let HJC_PARAM_NAME_ACCESS_TOKEN: Swift.String
public let HJC_PARAM_NAME_MODEL_TOKEN: Swift.String
public let HJC_PARAM_NAME_LANGUAGE: Swift.String
public let HJC_PARAM_NAME_TREE_TYPE: Swift.String
public let HJC_PARAM_NAME_ENTITY: Swift.String
public let HJC_PARAM_NAME_UUID: Swift.String
public let HJC_PARAM_NAME_UUIDs: Swift.String
public let HJC_PARAM_NAME_MODEL: Swift.String
public let HJC_PARAM_NAME_MODEL_NAME: Swift.String
public let HJC_PARAM_NAME_MODEL_FORMAT: Swift.String
public enum HJCoreFormat : Swift.String {
  case ifc
  case gltf
  case dae
  case gzip
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum HJCoreTreeType : Swift.String {
  case none
  case project
  case entity
  case type
  case layer
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum HJCoreModelStatus : Swift.Int {
  case analyzing
  case uploadSuccess
  case uploadFailed
  case deleting
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum HJCoreError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case general
  case emptyData
  case gzipError
  case cocoaGeneralError
  case cocoaFileReadNoSuchFileError
  case cocoaFileWriteUnsupportedSchemeError
  case cocoaFileWriteOutOfSpaceError
  case timedOut
  case networkConnectionLost
  case notConnectedToInternet
  case badServerResponse
  case badRequest
  case forbidden
  case notFound
  case conflict
  case internalServerError
  case serviceUnavailable
  case emptyUserToken
  case invalidUserToken
  case emptyModelToken
  case invalidModelToken
  case noAuthority
  case correspondingInfoNotFound
  case modelHasBeenDeleted
  case fileHasBeenDeleted
  case fileIsBeingGenerated
  case fileGenerationDidFail
  case dataNotFound
  case modelPermissionDenied
  case badExcelFormat
  case invalidParameter
  case userNotFoundInSystem
  case userHadBeenExist
  case badExcelFileFormat
  case userAccountExpired
  case ldapConfigDisabled
  case ldapUserNotFound
  case userHasNoPermissionForModel
  case emptyModelName
  case emptyModelFormat
  case invalidModelFormat
  case emptyModelFile
  case analysingInProgress
  case projectCreationDidFail
  case dataRequestError
  case invalidProjectToken
  case userHasNoDeletePermissionForProject
  case userHasNoAdminPermissionForProject
  case invalidUserEmailOrMobile
  case userPermissionAlreadyExists
  case userHasNoCreatePermissionForProject
  case bcfFileUploadDidFail
  case userHasNoReadPermissionForProject
  case invalidTopicGuid
  case bcfTopicAdditionDidFail
  case bcfTopicModificationDidFail
  case bcfTopicCommentDeletionDidFail
  case bcfCommentAdditionDidFail
  case modelAnalysisDidFail
  case modelFormatShouldBeIFC
  case userNotFoundInProject
  case invalidPermissionValue
  case attributeSetAlreadyExists
  case attributeAlreadyExists
  case attributeSetNotFound
  case attributeNotFound
  case invalidElementUUID
  case emptyAccessToken
  case invalidAccesstoken
  case emptyAppIdOrAppSecret
  case userTokenExpired
  case invalidAppIdOrAppSecret
  case missingParameter
  case fileGenerationFailed
  case noResultSelected
  case emptyEmailOrPassword
  case invalidEmail
  case adminAccessTokenIsRequired
  case adminAccountCanNotBeDeleted
  case parameterNotMatchingModelFormat
  case userNotFound
  case userHasNoManagePermissionForModel
  case noPermission
  case modelsLimitCountExceeded
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct HJCoreElement {
}
extension HJCoreElement : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc public class IFCSyncManager : ObjectiveC.NSObject {
  public init(with accessToken: Swift.String, modelToken: Swift.String)
  public func loadIFCProperties(completionHandler: @escaping (Swift.Error?) -> ())
  public func loadEntities(completionHandler: @escaping (Swift.Error?) -> ())
  public func loadAllTrees(completionHandler: @escaping (Swift.Error?) -> ())
  public func loadProjectTree(with endOperation: Foundation.BlockOperation, completionHandler: @escaping (Swift.Error?) -> ())
  public func loadEntitiesTree(with endOperation: Foundation.BlockOperation, completionHandler: @escaping (Swift.Error?) -> ())
  public func loadTypesTree(with endOperation: Foundation.BlockOperation, completionHandler: @escaping (Swift.Error?) -> ())
  public func loadLayersTree(with endOperation: Foundation.BlockOperation, completionHandler: @escaping (Swift.Error?) -> ())
  public func loadElements(completionHandler: @escaping (Swift.Error?) -> ())
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class IFCViewerViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate, IFCViewerFramework.CameraModesDelegate, IFCViewerFramework.MaskOptionsDelegate {
  public var modelID: Swift.String! {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func reloadInputViews()
  @objc deinit
  public func reloadData()
  @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  public func cameraModeChanged(cameraMode: IFCViewerFramework.CameraMode)
  public func maskOptionChanged(maskOption: IFCViewerFramework.MaskOption)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers public class IFCDBOperation : IFCViewerFramework.IFCAsynchronousOperation {
  @objc override dynamic public func cancel()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IFCDataBaseManager : ObjectiveC.NSObject {
  public class func propertiesLoaded(for modelID: Swift.String) -> Swift.Bool
  public class func manageDownloadStatus(for modelID: Swift.String, isDownloaded: Swift.Bool)
  public class func updateDownloadStatus(for modelID: Swift.String, isDownloaded: Swift.Bool)
  public class func createDownloadStatus(for modelID: Swift.String)
  public class func deleteDBfile(for modelID: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class IFCGeneralConfiguration : ObjectiveC.NSObject {
  @objc public static let shared: IFCViewerFramework.IFCGeneralConfiguration
  @objc public var hjcoreURL: Foundation.URL!
  @objc public var accessToken: Swift.String!
  @objc public var modelToken: Swift.String! {
    @objc get
    @objc set
  }
  @objc public var tintColor: UIKit.UIColor
  @objc public var language: Swift.String
  @objc public var rootDirectory: Foundation.URL!
  @objc public func configure(with hjcoreURL: Foundation.URL, accessToken: Swift.String)
  @objc public func configure(with hjcoreURL: Foundation.URL, accessToken: Swift.String, language: Swift.String, rootDirectory: Foundation.URL)
  @objc public func reset()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IFCTreesTabBarController : UIKit.UITabBarController {
  public var modelID: Swift.String! {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  public func reloadData()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public typealias failureHandler = (IFCViewerFramework.HJCoreError) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class HJCoreRestClient : ObjectiveC.NSObject {
  public func getAccessToken(appId: Swift.String, appSecret: Swift.String, sucessHandler: @escaping (Swift.String) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func loadModelTree(accessToken: Swift.String, modelToken: Swift.String, treeType: IFCViewerFramework.HJCoreTreeType, language: Swift.String, sucessHandler: @escaping (IFCViewerFramework.HJCoreTree) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func loadModelEntities(accessToken: Swift.String, modelToken: Swift.String, entity: Swift.String, language: Swift.String, sucessHandler: @escaping ([IFCViewerFramework.HJCoreEntity]) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func loadElement(accessToken: Swift.String, modelToken: Swift.String, uuid: Swift.String, language: Swift.String, sucessHandler: @escaping (IFCViewerFramework.HJCoreElement) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func loadElements(accessToken: Swift.String, modelToken: Swift.String, uuids: [Swift.String], language: Swift.String, sucessHandler: @escaping ([IFCViewerFramework.HJCoreElement]) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func getModelInformation(accessToken: Swift.String, modelToken: Swift.String, language: Swift.String, sucessHandler: @escaping (IFCViewerFramework.HJCoreModelMetadata) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func getModelName(accessToken: Swift.String, modelToken: Swift.String, language: Swift.String, sucessHandler: @escaping (Swift.String) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func downloadDAE(accessToken: Swift.String, modelToken: Swift.String, into directory: Foundation.URL, sucessHandler: @escaping (Foundation.URL) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func downloadDAEMac(accessToken: Swift.String, modelToken: Swift.String, into directory: Foundation.URL, sucessHandler: @escaping (Foundation.URL) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func downloadDAE(accessToken: Swift.String, modelToken: Swift.String, modelName: Swift.String, into directory: Foundation.URL, sucessHandler: @escaping (Foundation.URL) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func downloadDAEMac(accessToken: Swift.String, modelToken: Swift.String, modelName: Swift.String, into directory: Foundation.URL, sucessHandler: @escaping (Foundation.URL) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func uploadModel(accessToken: Swift.String, modelName: Swift.String, format: IFCViewerFramework.HJCoreFormat, model: Foundation.URL, sucessHandler: @escaping (IFCViewerFramework.HJCoreModelMetadata) -> Swift.Void, failureHandler: @escaping IFCViewerFramework.failureHandler)
  public func cancelAllRequests()
  public func cancelDataRequests()
  public func cancelDownloadRequests()
  public func cancelUploadRequests()
  @objc override dynamic public init()
  @objc deinit
}
public struct HJCoreNode {
}
extension HJCoreNode : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HJCoreEntity {
}
extension HJCoreEntity : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class IFCFileManager : ObjectiveC.NSObject {
  public class func rootDirectory(for modelID: Swift.String) -> Foundation.URL
  public class func createRootDirectory(for modelID: Swift.String) throws -> Foundation.URL
  public class func daeFileURL(for modelID: Swift.String) -> Foundation.URL
  public class func dbFileURL(for modelID: Swift.String) -> Foundation.URL
  public class func daeFileExists(for modelID: Swift.String) -> Swift.Bool
  public class func dbFileExists(for modelID: Swift.String) -> Swift.Bool
  public class func deleteDBFile(for modelID: Swift.String) throws
  @objc deinit
  @objc override dynamic public init()
}
public struct HJCoreLocation {
}
extension HJCoreLocation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HJCoreType {
}
extension HJCoreType : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct HJCoreTree {
}
extension IFCViewerFramework.CameraMode : Swift.Equatable {}
extension IFCViewerFramework.CameraMode : Swift.Hashable {}
extension IFCViewerFramework.MaskOption : Swift.Equatable {}
extension IFCViewerFramework.MaskOption : Swift.Hashable {}
extension IFCViewerFramework.HJCoreFormat : Swift.Equatable {}
extension IFCViewerFramework.HJCoreFormat : Swift.Hashable {}
extension IFCViewerFramework.HJCoreFormat : Swift.RawRepresentable {}
extension IFCViewerFramework.HJCoreTreeType : Swift.Equatable {}
extension IFCViewerFramework.HJCoreTreeType : Swift.Hashable {}
extension IFCViewerFramework.HJCoreTreeType : Swift.RawRepresentable {}
extension IFCViewerFramework.HJCoreModelStatus : Swift.Equatable {}
extension IFCViewerFramework.HJCoreModelStatus : Swift.Hashable {}
extension IFCViewerFramework.HJCoreModelStatus : Swift.RawRepresentable {}
extension IFCViewerFramework.HJCoreError : Swift.Equatable {}
extension IFCViewerFramework.HJCoreError : Swift.Hashable {}
extension IFCViewerFramework.HJCoreError : Swift.RawRepresentable {}
